{"version":3,"sources":["skylark-utils-stream.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","langx","streams","mixin","Stream","DecodeStream","Evented","inherit","klassName","init","arrayBuffer","start","dict","this","bytes","Uint8Array","pos","end","get","getByte","getBytes","strEnd","subarray","lookChar","String","fromCharCode","getChar","skip","n","reset","moveStart","makeSubStream","buffer","isStream","bufferLength","eof","ensureBuffer","requested","current","byteLength","size","buffer2","readBlock","bufEnd","stream","Ascii85Stream","str","input","overrided","tildaCode","charCodeAt","zCode","c","Lexer","isSpace","t","hexvalueMap","9","32","48","49","50","51","52","53","54","55","56","57","65","66","67","68","69","70","97","98","99","100","101","102","AsciiHexStream","decodeLength","gtCode","ChunkedStream","Class","declare","-parent-","-interfaces-","-protected-","-fields-","numChunks","numChunksLoaded","-methods-","-public-","-attributes-","getMissingChunks","chunks","chunk","loadedChunks","getBaseStreams","allChunksLoaded","_","onReceiveData","begin","assert","chunkSize","set","beginChunk","Math","floor","endChunk","onReceiveInitialData","data","initialDataLength","ensureRange","MissingDataException","nextEmptyChunk","hasChunk","peekBytes","getByteRange","ChunkedStreamSubstream","prototype","Object","create","missingChunks","subStream","-constructor-","initialize","overload","DecryptStream","decrypt","FakeStream","codeLenCodeMap","Uint32Array","lengthDecode","distDecode","fixedLitCodeTab","fixedDistCodeTab","FlateStream","bytesPos","cmf","flg","error","codeSize","codeBuf","getBits","bits","b","getCode","table","codes","maxLen","code","codeLen","codeVal","generateHuffmanTable","lengths","len","val","code2","hdr","blockLen","check","litCodeTable","distCodeTable","numLitCodes","numDistCodes","numCodeLenCodes","codeLenCodeLengths","codeLenCodeTab","codeLengths","bitsLength","bitsOffset","what","repeatLength","limit","code1","dist","k","LZWStream","earlyChange","cachedData","bitsCached","maxLzwDictionarySize","lzwState","codeLength","nextCode","dictionaryValues","dictionaryLengths","Uint16Array","dictionaryPrevCodes","currentSequence","currentSequenceLength","readBits","lastCode","j","q","blockSize","estimatedDecodedSize","decodedSizeDelta","prevCode","decodedLength","currentBufferLength","hasPrev","min","log","PredictorStream","params","predictor","readBlockTiff","readBlockPng","colors","columns","pixBytes","rowBytes","rawBytes","inbuf","outbuf","inbits","outbits","compArray","bitMask","kk","prevRow","up","upLeft","left","p","pa","pb","pc","StreamsSequenceStream","shift","newLength","StringStream","main"],"mappings":"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","file":"../skylark-utils-stream.js","sourcesContent":["define('skylark-utils-stream/streams',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\r\n\r\n\r\n\r\n    var streams = function() {\r\n        return streams;\r\n    }\r\n\r\n    langx.mixin(streams,{\r\n    \t\"Stream\" : Stream,\r\n        \"DecodeStream\" : DecodeStream\r\n    });\r\n\r\n    return skylark.streams = streams;\r\n});\r\n\ndefine('skylark-utils-stream/Stream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\"\r\n], function(skylark, langx,streams) {\r\n\r\n   \tvar Stream = langx.Evented.inherit({\r\n        klassName: \"Stream\",\r\n        init: function(arrayBuffer, start, length, dict) {\r\n\t        this.bytes = new Uint8Array(arrayBuffer);\r\n\t        this.start = start || 0;\r\n\t        this.pos = this.start;\r\n\t        this.end = (start + length) || this.bytes.length;\r\n\t        this.dict = dict;\r\n        },\r\n\r\n\r\n        length : {\r\n        \tget : function() {\r\n            \treturn this.end - this.start;\r\n        \t}\r\n        },\r\n\r\n        getByte: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return this.bytes[this.pos++];\r\n        },\r\n        // returns subarray of original buffer\r\n        // should only be read\r\n        getBytes: function (length) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n\r\n            if (!length)\r\n                return bytes.subarray(pos, strEnd);\r\n\r\n            var end = pos + length;\r\n            if (end > strEnd)\r\n                end = strEnd;\r\n\r\n            this.pos = end;\r\n            return bytes.subarray(pos, end);\r\n        },\r\n\r\n        lookChar: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return String.fromCharCode(this.bytes[this.pos]);\r\n        },\r\n        getChar: function () {\r\n            if (this.pos >= this.end)\r\n                return null;\r\n            return String.fromCharCode(this.bytes[this.pos++]);\r\n        },\r\n        skip: function (n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n        reset: function () {\r\n            this.pos = this.start;\r\n        },\r\n        moveStart: function () {\r\n            this.start = this.pos;\r\n        },\r\n        makeSubStream: function (start, length, dict) {\r\n            return new Stream(this.bytes.buffer, start, length, dict);\r\n        },\r\n        isStream: true\r\n    });\r\n    \r\n    return streams.Stream = Stream;\r\n\t\r\n});\r\n\ndefine('skylark-utils-stream/DecodeStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./Stream\"\r\n], function(skylark, langx, streams, Stream) {\r\n\r\n    var DecodeStream = Stream.inherit({\r\n        klassName : \"DecodeStream\",\r\n\r\n        init : function() {\r\n            this.pos = 0;\r\n            this.bufferLength = 0;\r\n            this.eof = false;\r\n            this.buffer = null;     \r\n        },\r\n\r\n        ensureBuffer: function(requested) {\r\n            var buffer = this.buffer;\r\n            var current = buffer ? buffer.byteLength : 0;\r\n            if (requested < current)\r\n                return buffer;\r\n            var size = 512;\r\n            while (size < requested)\r\n                size <<= 1;\r\n            var buffer2 = new Uint8Array(size);\r\n            for (var i = 0; i < current; ++i)\r\n                buffer2[i] = buffer[i];\r\n            return (this.buffer = buffer2);\r\n        },\r\n        getByte: function () {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return this.buffer[this.pos++];\r\n        },\r\n        getBytes: function(length) {\r\n            var end, pos = this.pos;\r\n\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n\r\n                while (!this.eof && this.bufferLength < end)\r\n                    this.readBlock();\r\n\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd)\r\n                    end = bufEnd;\r\n            } else {\r\n                while (!this.eof)\r\n                    this.readBlock();\r\n\r\n                end = this.bufferLength;\r\n\r\n                // checking if bufferLength is still 0 then\r\n                // the buffer has to be initialized\r\n                if (!end)\r\n                    this.buffer = new Uint8Array(0);\r\n            }\r\n\r\n            this.pos = end;\r\n            return this.buffer.subarray(pos, end);\r\n        },\r\n        lookChar: function() {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return String.fromCharCode(this.buffer[this.pos]);\r\n        },\r\n        getChar: function () {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof)\r\n                    return null;\r\n                this.readBlock();\r\n            }\r\n            return String.fromCharCode(this.buffer[this.pos++]);\r\n        },\r\n        makeSubStream: function (start, length, dict) {\r\n            var end = start + length;\r\n            while (this.bufferLength <= end && !this.eof)\r\n                this.readBlock();\r\n            return new Stream(this.buffer, start, length, dict);\r\n        },\r\n        skip: function (n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n        reset: function () {\r\n            this.pos = 0;\r\n        }\r\n\r\n    });\r\n\r\n    return stream.DecodeStream = DecodeStream;\r\n\r\n});\r\n\ndefine('skylark-utils-stream/Ascii85Stream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var Ascii85Stream = DecodeStream.inherit({\r\n        klassName : \"Ascii85Stream\",\r\n\r\n        init : function(str) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.input = new Uint8Array(5);\r\n\r\n            this.overrided();          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var tildaCode = '~'.charCodeAt(0);\r\n            var zCode = 'z'.charCodeAt(0);\r\n            var str = this.str;\r\n\r\n            var c = str.getByte();\r\n            while (Lexer.isSpace(String.fromCharCode(c)))\r\n                c = str.getByte();\r\n\r\n            if (!c || c === tildaCode) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n\r\n            var bufferLength = this.bufferLength,\r\n                buffer;\r\n\r\n            // special code for z\r\n            if (c == zCode) {\r\n                buffer = this.ensureBuffer(bufferLength + 4);\r\n                for (var i = 0; i < 4; ++i)\r\n                    buffer[bufferLength + i] = 0;\r\n                this.bufferLength += 4;\r\n            } else {\r\n                var input = this.input;\r\n                input[0] = c;\r\n                for (var i = 1; i < 5; ++i) {\r\n                    c = str.getByte();\r\n                    while (Lexer.isSpace(String.fromCharCode(c)))\r\n                        c = str.getByte();\r\n\r\n                    input[i] = c;\r\n\r\n                    if (!c || c == tildaCode)\r\n                        break;\r\n                }\r\n                buffer = this.ensureBuffer(bufferLength + i - 1);\r\n                this.bufferLength += i - 1;\r\n\r\n                // partial ending;\r\n                if (i < 5) {\r\n                    for (; i < 5; ++i)\r\n                        input[i] = 0x21 + 84;\r\n                    this.eof = true;\r\n                }\r\n                var t = 0;\r\n                for (var i = 0; i < 5; ++i)\r\n                    t = t * 85 + (input[i] - 0x21);\r\n\r\n                for (var i = 3; i >= 0; --i) {\r\n                    buffer[bufferLength + i] = t & 0xFF;\r\n                    t >>= 8;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return streams.Ascii85Stream = Ascii85Stream;\r\n\r\n});\r\n\ndefine('skylark-utils-stream/AsciiHexStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n    var hexvalueMap = {\r\n        9: -1, // \\t\r\n        32: -1, // space\r\n        48: 0,\r\n        49: 1,\r\n        50: 2,\r\n        51: 3,\r\n        52: 4,\r\n        53: 5,\r\n        54: 6,\r\n        55: 7,\r\n        56: 8,\r\n        57: 9,\r\n        65: 10,\r\n        66: 11,\r\n        67: 12,\r\n        68: 13,\r\n        69: 14,\r\n        70: 15,\r\n        97: 10,\r\n        98: 11,\r\n        99: 12,\r\n        100: 13,\r\n        101: 14,\r\n        102: 15\r\n    };\r\n\r\n    var AsciiHexStream = DecodeStream.inherit({\r\n        klassName : \"AsciiHexStream\",\r\n\r\n        init : function(str) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n\r\n            this.overrided();          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var gtCode = '>'.charCodeAt(0),\r\n                bytes = this.str.getBytes(),\r\n                c, n,\r\n                decodeLength, buffer, bufferLength, i, length;\r\n\r\n            decodeLength = (bytes.length + 1) >> 1;\r\n            buffer = this.ensureBuffer(this.bufferLength + decodeLength);\r\n            bufferLength = this.bufferLength;\r\n\r\n            for (i = 0, length = bytes.length; i < length; i++) {\r\n                c = hexvalueMap[bytes[i]];\r\n                while (c == -1 && (i + 1) < length) {\r\n                    c = hexvalueMap[bytes[++i]];\r\n                }\r\n\r\n                if ((i + 1) < length && (bytes[i + 1] !== gtCode)) {\r\n                    n = hexvalueMap[bytes[++i]];\r\n                    buffer[bufferLength++] = c * 16 + n;\r\n                } else {\r\n                    // EOD marker at an odd number, behave as if a 0 followed the last\r\n                    // digit.\r\n                    if (bytes[i] !== gtCode) {\r\n                        buffer[bufferLength++] = c * 16;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.bufferLength = bufferLength;\r\n            this.eof = true;        \r\n       }\r\n\r\n    });\r\n\r\n    return streams.AsciiHexStream = AsciiHexStream;\r\n});\r\n\ndefine('skylark-utils-stream/ChunkedStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx,DecodeStream) {\r\n\r\n\r\n    var ChunkedStream = Class.declare({\r\n        \"-parent-\": Stream,\r\n\r\n        \"-interfaces-\": [],\r\n\r\n        \"-protected-\": {\r\n            \"-fields-\": {\r\n                \"numChunks\": 0,\r\n                \"numChunksLoaded\": 0\r\n            },\r\n\r\n            \"-methods-\": {\r\n\r\n            }\r\n        },\r\n\r\n        \"-public-\": {\r\n            \"-attributes-\": {\r\n\r\n\r\n            },\r\n            \"-methods-\": {\r\n                \"numChunks\": function() {\r\n\r\n                },\r\n\r\n\r\n                getMissingChunks: function ChunkedStream_getMissingChunks() {\r\n                    var chunks = [];\r\n                    for (var chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\r\n                        if (!(chunk in this.loadedChunks)) {\r\n                            chunks.push(chunk);\r\n                        }\r\n                    }\r\n                    return chunks;\r\n                },\r\n\r\n                getBaseStreams: function ChunkedStream_getBaseStreams() {\r\n                    return [this];\r\n                },\r\n\r\n                allChunksLoaded: function ChunkedStream_allChunksLoaded() {\r\n                    var _ = this._;\r\n                    return _.numChunksLoaded === _.numChunks;\r\n                },\r\n\r\n                onReceiveData: function(begin, chunk) {\r\n                    var end = begin + chunk.byteLength;\r\n\r\n                    assert(begin % this.chunkSize === 0, 'Bad begin offset: ' + begin);\r\n                    // Using this.length is inaccurate here since this.start can be moved\r\n                    // See ChunkedStream.moveStart()\r\n                    var length = this.bytes.length;\r\n                    assert(end % this.chunkSize === 0 || end === length,\r\n                        'Bad end offset: ' + end);\r\n\r\n                    this.bytes.set(new Uint8Array(chunk), begin);\r\n                    var chunkSize = this.chunkSize;\r\n                    var beginChunk = Math.floor(begin / chunkSize);\r\n                    var endChunk = Math.floor((end - 1) / chunkSize) + 1;\r\n\r\n                    for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                        if (!(chunk in this.loadedChunks)) {\r\n                            this.loadedChunks[chunk] = true;\r\n                            ++this.numChunksLoaded;\r\n                        }\r\n                    }\r\n                },\r\n\r\n                onReceiveInitialData: function(data) {\r\n                    this.bytes.set(data);\r\n                    this.initialDataLength = data.length;\r\n                    var endChunk = this.end === data.length ?\r\n                        this.numChunks : Math.floor(data.length / this.chunkSize);\r\n                    for (var i = 0; i < endChunk; i++) {\r\n                        this.loadedChunks[i] = true;\r\n                        ++this.numChunksLoaded;\r\n                    }\r\n                },\r\n\r\n                ensureRange: function ChunkedStream_ensureRange(begin, end) {\r\n                    if (begin >= end) {\r\n                        return;\r\n                    }\r\n\r\n                    if (end <= this.initialDataLength) {\r\n                        return;\r\n                    }\r\n\r\n                    var chunkSize = this.chunkSize;\r\n                    var beginChunk = Math.floor(begin / chunkSize);\r\n                    var endChunk = Math.floor((end - 1) / chunkSize) + 1;\r\n                    for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                        if (!(chunk in this.loadedChunks)) {\r\n                            throw new MissingDataException(begin, end);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                nextEmptyChunk: function ChunkedStream_nextEmptyChunk(beginChunk) {\r\n                    for (var chunk = beginChunk, n = this.numChunks; chunk < n; ++chunk) {\r\n                        if (!(chunk in this.loadedChunks)) {\r\n                            return chunk;\r\n                        }\r\n                    }\r\n                    // Wrap around to beginning\r\n                    for (var chunk = 0; chunk < beginChunk; ++chunk) {\r\n                        if (!(chunk in this.loadedChunks)) {\r\n                            return chunk;\r\n                        }\r\n                    }\r\n                    return null;\r\n                },\r\n\r\n                hasChunk: function ChunkedStream_hasChunk(chunk) {\r\n                    return chunk in this._.loadedChunks;\r\n                },\r\n\r\n                getByte: function ChunkedStream_getByte() {\r\n                    var pos = this.pos;\r\n                    if (pos >= this.end) {\r\n                        return -1;\r\n                    }\r\n                    this.ensureRange(pos, pos + 1);\r\n                    return this.bytes[this.pos++];\r\n                },\r\n\r\n                // returns subarray of original buffer\r\n                // should only be read\r\n                getBytes: function ChunkedStream_getBytes(length) {\r\n                    var bytes = this.bytes;\r\n                    var pos = this.pos;\r\n                    var strEnd = this.end;\r\n\r\n                    if (!length) {\r\n                        this.ensureRange(pos, strEnd);\r\n                        return bytes.subarray(pos, strEnd);\r\n                    }\r\n\r\n                    var end = pos + length;\r\n                    if (end > strEnd)\r\n                        end = strEnd;\r\n                    this.ensureRange(pos, end);\r\n\r\n                    this.pos = end;\r\n                    return bytes.subarray(pos, end);\r\n                },\r\n\r\n                peekBytes: function ChunkedStream_peekBytes(length) {\r\n                    var bytes = this.getBytes(length);\r\n                    this.pos -= bytes.length;\r\n                    return bytes;\r\n                },\r\n\r\n                getByteRange: function ChunkedStream_getBytes(begin, end) {\r\n                    this.ensureRange(begin, end);\r\n                    return this.bytes.subarray(begin, end);\r\n                },\r\n\r\n                skip: function ChunkedStream_skip(n) {\r\n                    if (!n)\r\n                        n = 1;\r\n                    this.pos += n;\r\n                },\r\n\r\n                reset: function ChunkedStream_reset() {\r\n                    this.pos = this.start;\r\n                },\r\n\r\n                moveStart: function ChunkedStream_moveStart() {\r\n                    this.start = this.pos;\r\n                },\r\n\r\n                makeSubStream: function ChunkedStream_makeSubStream(start, length, dict) {\r\n                    function ChunkedStreamSubstream() {}\r\n                    ChunkedStreamSubstream.prototype = Object.create(this);\r\n                    ChunkedStreamSubstream.prototype.getMissingChunks = function() {\r\n                        var chunkSize = this.chunkSize;\r\n                        var beginChunk = Math.floor(this.start / chunkSize);\r\n                        var endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\r\n                        var missingChunks = [];\r\n                        for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                            if (!(chunk in this.loadedChunks)) {\r\n                                missingChunks.push(chunk);\r\n                            }\r\n                        }\r\n                        return missingChunks;\r\n                    };\r\n                    var subStream = new ChunkedStreamSubstream();\r\n                    subStream.pos = subStream.start = start;\r\n                    subStream.end = start + length || this.end;\r\n                    subStream.dict = dict;\r\n                    return subStream;\r\n                }\r\n\r\n            }\r\n        },\r\n        \"-constructor-\": {\r\n            \"initialize\": [\r\n\r\n                function() {\r\n                    this.overload(\"\");\r\n                },\r\n\r\n                function( /*String*/ str) {\r\n                    var length = str.length;\r\n                    var bytes = new Uint8Array(length);\r\n                    for (var n = 0; n < length; ++n)\r\n                        bytes[n] = str.charCodeAt(n);\r\n                    this.overrided(bytes);\r\n                }\r\n            ]\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return ChunkedStream;\r\n\r\n});\r\n\n\r\ndefine('skylark-utils-stream/DecryptStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var chunkSize = 512;\r\n\r\n    var DecryptStream = DecodeStream.inherit({\r\n        klassName : \"DecryptStream\",\r\n\r\n        init : function(str, decrypt) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.decrypt = decrypt;\r\n            this.overrided();          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var chunk = this.str.getBytes(chunkSize);\r\n            if (!chunk || chunk.length == 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var decrypt = this.decrypt;\r\n            chunk = decrypt(chunk);\r\n\r\n            var bufferLength = this.bufferLength;\r\n            var i, n = chunk.length;\r\n            var buffer = this.ensureBuffer(bufferLength + n);\r\n            for (i = 0; i < n; i++)\r\n                buffer[bufferLength++] = chunk[i];\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.DecryptStream = DecryptStream;\r\n});\r\n\n\r\ndefine('skylark-utils-stream/FakeStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var FakeStream = DecodeStream.inherit({\r\n        klassName : \"FakeStream\",\r\n\r\n        init : function(stream) {\r\n            this.dict = stream.dict;\r\n            this.overrided();          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var bufferLength = this.bufferLength;\r\n            bufferLength += 1024;\r\n            var buffer = this.ensureBuffer(bufferLength);\r\n            this.bufferLength = bufferLength;\r\n        },\r\n\r\n        getBytes : function (length) {\r\n            var end, pos = this.pos;\r\n\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n\r\n                while (!this.eof && this.bufferLength < end)\r\n                    this.readBlock();\r\n\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd)\r\n                    end = bufEnd;\r\n            } else {\r\n                this.eof = true;\r\n                end = this.bufferLength;\r\n            }\r\n\r\n            this.pos = end;\r\n            return this.buffer.subarray(pos, end);\r\n        }\r\n\r\n    });\r\n\r\n    return streams.FakeStream = FakeStream;\r\n});\r\n\n\r\ndefine('skylark-utils-stream/FlateStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var codeLenCodeMap = new Uint32Array([\r\n        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15\r\n    ]);\r\n\r\n    var lengthDecode = new Uint32Array([\r\n        0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a,\r\n        0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f,\r\n        0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073,\r\n        0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102\r\n    ]);\r\n\r\n    var distDecode = new Uint32Array([\r\n        0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d,\r\n        0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1,\r\n        0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01,\r\n        0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001\r\n    ]);\r\n\r\n    var fixedLitCodeTab = [new Uint32Array([\r\n        0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0,\r\n        0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0,\r\n        0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0,\r\n        0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0,\r\n        0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8,\r\n        0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8,\r\n        0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,\r\n        0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8,\r\n        0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4,\r\n        0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4,\r\n        0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4,\r\n        0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4,\r\n        0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc,\r\n        0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,\r\n        0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc,\r\n        0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc,\r\n        0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2,\r\n        0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2,\r\n        0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2,\r\n        0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2,\r\n        0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,\r\n        0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea,\r\n        0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da,\r\n        0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa,\r\n        0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6,\r\n        0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6,\r\n        0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6,\r\n        0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,\r\n        0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce,\r\n        0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee,\r\n        0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de,\r\n        0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe,\r\n        0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1,\r\n        0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1,\r\n        0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,\r\n        0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1,\r\n        0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9,\r\n        0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9,\r\n        0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9,\r\n        0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9,\r\n        0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5,\r\n        0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,\r\n        0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5,\r\n        0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5,\r\n        0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd,\r\n        0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed,\r\n        0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd,\r\n        0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd,\r\n        0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,\r\n        0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3,\r\n        0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3,\r\n        0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3,\r\n        0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb,\r\n        0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb,\r\n        0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db,\r\n        0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,\r\n        0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7,\r\n        0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7,\r\n        0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7,\r\n        0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7,\r\n        0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf,\r\n        0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef,\r\n        0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,\r\n        0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff\r\n    ]), 9];\r\n\r\n    var fixedDistCodeTab = [new Uint32Array([\r\n        0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c,\r\n        0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000,\r\n        0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d,\r\n        0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000\r\n    ]), 5];\r\n\r\n\r\n    var FlateStream = DecodeStream.inherit({\r\n        klassName : \"FlateStream\",\r\n\r\n        init : function(stream) {\r\n            var bytes = stream.getBytes();\r\n            var bytesPos = 0;\r\n\r\n            this.dict = stream.dict;\r\n            var cmf = bytes[bytesPos++];\r\n            var flg = bytes[bytesPos++];\r\n            if (cmf == -1 || flg == -1)\r\n                error('Invalid header in flate stream: ' + cmf + ', ' + flg);\r\n            if ((cmf & 0x0f) != 0x08)\r\n                error('Unknown compression method in flate stream: ' + cmf + ', ' + flg);\r\n            if ((((cmf << 8) + flg) % 31) != 0)\r\n                error('Bad FCHECK in flate stream: ' + cmf + ', ' + flg);\r\n            if (flg & 0x20)\r\n                error('FDICT bit set in flate stream: ' + cmf + ', ' + flg);\r\n\r\n            this.bytes = bytes;\r\n            this.bytesPos = bytesPos;\r\n\r\n            this.codeSize = 0;\r\n            this.codeBuf = 0;\r\n            this.overrided();          \r\n        },\r\n\r\n        getBits : function(bits) {\r\n            var codeSize = this.codeSize;\r\n            var codeBuf = this.codeBuf;\r\n            var bytes = this.bytes;\r\n            var bytesPos = this.bytesPos;\r\n\r\n            var b;\r\n            while (codeSize < bits) {\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad encoding in flate stream');\r\n                codeBuf |= b << codeSize;\r\n                codeSize += 8;\r\n            }\r\n            b = codeBuf & ((1 << bits) - 1);\r\n            this.codeBuf = codeBuf >> bits;\r\n            this.codeSize = codeSize -= bits;\r\n            this.bytesPos = bytesPos;\r\n            return b;\r\n        },\r\n\r\n        getCode : function(table) {\r\n            var codes = table[0];\r\n            var maxLen = table[1];\r\n            var codeSize = this.codeSize;\r\n            var codeBuf = this.codeBuf;\r\n            var bytes = this.bytes;\r\n            var bytesPos = this.bytesPos;\r\n\r\n            while (codeSize < maxLen) {\r\n                var b;\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad encoding in flate stream');\r\n                codeBuf |= (b << codeSize);\r\n                codeSize += 8;\r\n            }\r\n            var code = codes[codeBuf & ((1 << maxLen) - 1)];\r\n            var codeLen = code >> 16;\r\n            var codeVal = code & 0xffff;\r\n            if (codeSize == 0 || codeSize < codeLen || codeLen == 0)\r\n                error('Bad encoding in flate stream');\r\n            this.codeBuf = (codeBuf >> codeLen);\r\n            this.codeSize = (codeSize - codeLen);\r\n            this.bytesPos = bytesPos;\r\n            return codeVal;\r\n        },\r\n\r\n        generateHuffmanTable : function(lengths) {\r\n                var n = lengths.length;\r\n\r\n                // find max code length\r\n                var maxLen = 0;\r\n                for (var i = 0; i < n; ++i) {\r\n                    if (lengths[i] > maxLen)\r\n                        maxLen = lengths[i];\r\n                }\r\n\r\n                // build the table\r\n                var size = 1 << maxLen;\r\n                var codes = new Uint32Array(size);\r\n                for (var len = 1, code = 0, skip = 2; len <= maxLen;\r\n                    ++len, code <<= 1, skip <<= 1) {\r\n                    for (var val = 0; val < n; ++val) {\r\n                        if (lengths[val] == len) {\r\n                            // bit-reverse the code\r\n                            var code2 = 0;\r\n                            var t = code;\r\n                            for (var i = 0; i < len; ++i) {\r\n                                code2 = (code2 << 1) | (t & 1);\r\n                                t >>= 1;\r\n                            }\r\n\r\n                            // fill the table entries\r\n                            for (var i = code2; i < size; i += skip)\r\n                                codes[i] = (len << 16) | val;\r\n\r\n                            ++code;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return [codes, maxLen];\r\n        },\r\n\r\n        readBlock : function() {\r\n            // read block header\r\n            var hdr = this.getBits(3);\r\n            if (hdr & 1)\r\n                this.eof = true;\r\n            hdr >>= 1;\r\n\r\n            if (hdr == 0) { // uncompressed block\r\n                var bytes = this.bytes;\r\n                var bytesPos = this.bytesPos;\r\n                var b;\r\n\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad block header in flate stream');\r\n                var blockLen = b;\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad block header in flate stream');\r\n                blockLen |= (b << 8);\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad block header in flate stream');\r\n                var check = b;\r\n                if (typeof(b = bytes[bytesPos++]) == 'undefined')\r\n                    error('Bad block header in flate stream');\r\n                check |= (b << 8);\r\n                if (check != (~blockLen & 0xffff))\r\n                    error('Bad uncompressed block length in flate stream');\r\n\r\n                this.codeBuf = 0;\r\n                this.codeSize = 0;\r\n\r\n                var bufferLength = this.bufferLength;\r\n                var buffer = this.ensureBuffer(bufferLength + blockLen);\r\n                var end = bufferLength + blockLen;\r\n                this.bufferLength = end;\r\n                for (var n = bufferLength; n < end; ++n) {\r\n                    if (typeof(b = bytes[bytesPos++]) == 'undefined') {\r\n                        this.eof = true;\r\n                        break;\r\n                    }\r\n                    buffer[n] = b;\r\n                }\r\n                this.bytesPos = bytesPos;\r\n                return;\r\n            }\r\n\r\n            var litCodeTable;\r\n            var distCodeTable;\r\n            if (hdr == 1) { // compressed block, fixed codes\r\n                litCodeTable = fixedLitCodeTab;\r\n                distCodeTable = fixedDistCodeTab;\r\n            } else if (hdr == 2) { // compressed block, dynamic codes\r\n                var numLitCodes = this.getBits(5) + 257;\r\n                var numDistCodes = this.getBits(5) + 1;\r\n                var numCodeLenCodes = this.getBits(4) + 4;\r\n\r\n                // build the code lengths code table\r\n                var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\r\n\r\n                for (var i = 0; i < numCodeLenCodes; ++i)\r\n                    codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\r\n                var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\r\n\r\n                // build the literal and distance code tables\r\n                var len = 0;\r\n                var i = 0;\r\n                var codes = numLitCodes + numDistCodes;\r\n                var codeLengths = new Uint8Array(codes);\r\n                while (i < codes) {\r\n                    var code = this.getCode(codeLenCodeTab);\r\n                    if (code == 16) {\r\n                        var bitsLength = 2,\r\n                            bitsOffset = 3,\r\n                            what = len;\r\n                    } else if (code == 17) {\r\n                        var bitsLength = 3,\r\n                            bitsOffset = 3,\r\n                            what = (len = 0);\r\n                    } else if (code == 18) {\r\n                        var bitsLength = 7,\r\n                            bitsOffset = 11,\r\n                            what = (len = 0);\r\n                    } else {\r\n                        codeLengths[i++] = len = code;\r\n                        continue;\r\n                    }\r\n\r\n                    var repeatLength = this.getBits(bitsLength) + bitsOffset;\r\n                    while (repeatLength-- > 0)\r\n                        codeLengths[i++] = what;\r\n                }\r\n\r\n                litCodeTable =\r\n                    this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\r\n                distCodeTable =\r\n                    this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\r\n            } else {\r\n                error('Unknown block type in flate stream');\r\n            }\r\n\r\n            var buffer = this.buffer;\r\n            var limit = buffer ? buffer.length : 0;\r\n            var pos = this.bufferLength;\r\n            while (true) {\r\n                var code1 = this.getCode(litCodeTable);\r\n                if (code1 < 256) {\r\n                    if (pos + 1 >= limit) {\r\n                        buffer = this.ensureBuffer(pos + 1);\r\n                        limit = buffer.length;\r\n                    }\r\n                    buffer[pos++] = code1;\r\n                    continue;\r\n                }\r\n                if (code1 == 256) {\r\n                    this.bufferLength = pos;\r\n                    return;\r\n                }\r\n                code1 -= 257;\r\n                code1 = lengthDecode[code1];\r\n                var code2 = code1 >> 16;\r\n                if (code2 > 0)\r\n                    code2 = this.getBits(code2);\r\n                var len = (code1 & 0xffff) + code2;\r\n                code1 = this.getCode(distCodeTable);\r\n                code1 = distDecode[code1];\r\n                code2 = code1 >> 16;\r\n                if (code2 > 0)\r\n                    code2 = this.getBits(code2);\r\n                var dist = (code1 & 0xffff) + code2;\r\n                if (pos + len >= limit) {\r\n                    buffer = this.ensureBuffer(pos + len);\r\n                    limit = buffer.length;\r\n                }\r\n                for (var k = 0; k < len; ++k, ++pos)\r\n                    buffer[pos] = buffer[pos - dist];\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return streams.FlateStream = FlateStream;\r\n});\r\n\ndefine('skylark-utils-stream/LZWStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var LZWStream = DecodeStream.inherit({\r\n        klassName : \"LZWStream\",\r\n\r\n        init : function(str, earlyChange) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.cachedData = 0;\r\n            this.bitsCached = 0;\r\n\r\n            var maxLzwDictionarySize = 4096;\r\n            var lzwState = {\r\n                earlyChange: earlyChange,\r\n                codeLength: 9,\r\n                nextCode: 258,\r\n                dictionaryValues: new Uint8Array(maxLzwDictionarySize),\r\n                dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\r\n                dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\r\n                currentSequence: new Uint8Array(maxLzwDictionarySize),\r\n                currentSequenceLength: 0\r\n            };\r\n            for (var i = 0; i < 256; ++i) {\r\n                lzwState.dictionaryValues[i] = i;\r\n                lzwState.dictionaryLengths[i] = 1;\r\n            }\r\n            this.lzwState = lzwState;\r\n            this.overrided();          \r\n        },\r\n\r\n        readBits : function(n) {\r\n            var bitsCached = this.bitsCached;\r\n            var cachedData = this.cachedData;\r\n            while (bitsCached < n) {\r\n                var c = this.str.getByte();\r\n                if (c == null) {\r\n                    this.eof = true;\r\n                    return null;\r\n                }\r\n                cachedData = (cachedData << 8) | c;\r\n                bitsCached += 8;\r\n            }\r\n            this.bitsCached = (bitsCached -= n);\r\n            this.cachedData = cachedData;\r\n            this.lastCode = null;\r\n            return (cachedData >>> bitsCached) & ((1 << n) - 1);\r\n        },\r\n\r\n        readBlock : function() {\r\n            var blockSize = 512;\r\n            var estimatedDecodedSize = blockSize * 2,\r\n                decodedSizeDelta = blockSize;\r\n            var i, j, q;\r\n\r\n            var lzwState = this.lzwState;\r\n            if (!lzwState)\r\n                return; // eof was found\r\n\r\n            var earlyChange = lzwState.earlyChange;\r\n            var nextCode = lzwState.nextCode;\r\n            var dictionaryValues = lzwState.dictionaryValues;\r\n            var dictionaryLengths = lzwState.dictionaryLengths;\r\n            var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\r\n            var codeLength = lzwState.codeLength;\r\n            var prevCode = lzwState.prevCode;\r\n            var currentSequence = lzwState.currentSequence;\r\n            var currentSequenceLength = lzwState.currentSequenceLength;\r\n\r\n            var decodedLength = 0;\r\n            var currentBufferLength = this.bufferLength;\r\n            var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\r\n\r\n            for (i = 0; i < blockSize; i++) {\r\n                var code = this.readBits(codeLength);\r\n                var hasPrev = currentSequenceLength > 0;\r\n                if (code < 256) {\r\n                    currentSequence[0] = code;\r\n                    currentSequenceLength = 1;\r\n                } else if (code >= 258) {\r\n                    if (code < nextCode) {\r\n                        currentSequenceLength = dictionaryLengths[code];\r\n                        for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\r\n                            currentSequence[j] = dictionaryValues[q];\r\n                            q = dictionaryPrevCodes[q];\r\n                        }\r\n                    } else {\r\n                        currentSequence[currentSequenceLength++] = currentSequence[0];\r\n                    }\r\n                } else if (code == 256) {\r\n                    codeLength = 9;\r\n                    nextCode = 258;\r\n                    currentSequenceLength = 0;\r\n                    continue;\r\n                } else {\r\n                    this.eof = true;\r\n                    delete this.lzwState;\r\n                    break;\r\n                }\r\n\r\n                if (hasPrev) {\r\n                    dictionaryPrevCodes[nextCode] = prevCode;\r\n                    dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\r\n                    dictionaryValues[nextCode] = currentSequence[0];\r\n                    nextCode++;\r\n                    codeLength = (nextCode + earlyChange) & (nextCode + earlyChange - 1) ?\r\n                        codeLength : Math.min(Math.log(nextCode + earlyChange) /\r\n                            0.6931471805599453 + 1, 12) | 0;\r\n                }\r\n                prevCode = code;\r\n\r\n                decodedLength += currentSequenceLength;\r\n                if (estimatedDecodedSize < decodedLength) {\r\n                    do {\r\n                        estimatedDecodedSize += decodedSizeDelta;\r\n                    } while (estimatedDecodedSize < decodedLength);\r\n                    buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\r\n                }\r\n                for (j = 0; j < currentSequenceLength; j++)\r\n                    buffer[currentBufferLength++] = currentSequence[j];\r\n            }\r\n            lzwState.nextCode = nextCode;\r\n            lzwState.codeLength = codeLength;\r\n            lzwState.prevCode = prevCode;\r\n            lzwState.currentSequenceLength = currentSequenceLength;\r\n\r\n            this.bufferLength = currentBufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.LZWStream = LZWStream;\r\n});\r\n\n\r\ndefine('skylark-utils-stream/PredictorStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var PredictorStream = DecodeStream.inherit({\r\n        klassName : \"PredictorStream\",\r\n\r\n        init : function(stream, params) {\r\n            var predictor = this.predictor = params.get('Predictor') || 1;\r\n\r\n            if (predictor <= 1)\r\n                return stream; // no prediction\r\n            if (predictor !== 2 && (predictor < 10 || predictor > 15))\r\n                error('Unsupported predictor: ' + predictor);\r\n\r\n            if (predictor === 2)\r\n                this.readBlock = this.readBlockTiff;\r\n            else\r\n                this.readBlock = this.readBlockPng;\r\n\r\n            this.stream = stream;\r\n            this.dict = stream.dict;\r\n\r\n            var colors = this.colors = params.get('Colors') || 1;\r\n            var bits = this.bits = params.get('BitsPerComponent') || 8;\r\n            var columns = this.columns = params.get('Columns') || 1;\r\n\r\n            this.pixBytes = (colors * bits + 7) >> 3;\r\n            this.rowBytes = (columns * colors * bits + 7) >> 3;\r\n            this.overrided();          \r\n        },\r\n\r\n        readBlockTiff : function () {\r\n                var rowBytes = this.rowBytes;\r\n\r\n                var bufferLength = this.bufferLength;\r\n                var buffer = this.ensureBuffer(bufferLength + rowBytes);\r\n\r\n                var bits = this.bits;\r\n                var colors = this.colors;\r\n\r\n                var rawBytes = this.stream.getBytes(rowBytes);\r\n\r\n                var inbuf = 0,\r\n                    outbuf = 0;\r\n                var inbits = 0,\r\n                    outbits = 0;\r\n                var pos = bufferLength;\r\n\r\n                if (bits === 1) {\r\n                    for (var i = 0; i < rowBytes; ++i) {\r\n                        var c = rawBytes[i];\r\n                        inbuf = (inbuf << 8) | c;\r\n                        // bitwise addition is exclusive or\r\n                        // first shift inbuf and then add\r\n                        buffer[pos++] = (c ^ (inbuf >> colors)) & 0xFF;\r\n                        // truncate inbuf (assumes colors < 16)\r\n                        inbuf &= 0xFFFF;\r\n                    }\r\n                } else if (bits === 8) {\r\n                    for (var i = 0; i < colors; ++i)\r\n                        buffer[pos++] = rawBytes[i];\r\n                    for (; i < rowBytes; ++i) {\r\n                        buffer[pos] = buffer[pos - colors] + rawBytes[i];\r\n                        pos++;\r\n                    }\r\n                } else {\r\n                    var compArray = new Uint8Array(colors + 1);\r\n                    var bitMask = (1 << bits) - 1;\r\n                    var j = 0,\r\n                        k = bufferLength;\r\n                    var columns = this.columns;\r\n                    for (var i = 0; i < columns; ++i) {\r\n                        for (var kk = 0; kk < colors; ++kk) {\r\n                            if (inbits < bits) {\r\n                                inbuf = (inbuf << 8) | (rawBytes[j++] & 0xFF);\r\n                                inbits += 8;\r\n                            }\r\n                            compArray[kk] = (compArray[kk] +\r\n                                (inbuf >> (inbits - bits))) & bitMask;\r\n                            inbits -= bits;\r\n                            outbuf = (outbuf << bits) | compArray[kk];\r\n                            outbits += bits;\r\n                            if (outbits >= 8) {\r\n                                buffer[k++] = (outbuf >> (outbits - 8)) & 0xFF;\r\n                                outbits -= 8;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (outbits > 0) {\r\n                        buffer[k++] = (outbuf << (8 - outbits)) +\r\n                            (inbuf & ((1 << (8 - outbits)) - 1));\r\n                    }\r\n                }\r\n                this.bufferLength += rowBytes;\r\n        },\r\n\r\n        readBlockPng : function() {\r\n\r\n                var rowBytes = this.rowBytes;\r\n                var pixBytes = this.pixBytes;\r\n\r\n                var predictor = this.stream.getByte();\r\n                var rawBytes = this.stream.getBytes(rowBytes);\r\n\r\n                var bufferLength = this.bufferLength;\r\n                var buffer = this.ensureBuffer(bufferLength + rowBytes);\r\n\r\n                var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\r\n                if (prevRow.length == 0)\r\n                    prevRow = new Uint8Array(rowBytes);\r\n\r\n                var j = bufferLength;\r\n                switch (predictor) {\r\n                    case 0:\r\n                        for (var i = 0; i < rowBytes; ++i)\r\n                            buffer[j++] = rawBytes[i];\r\n                        break;\r\n                    case 1:\r\n                        for (var i = 0; i < pixBytes; ++i)\r\n                            buffer[j++] = rawBytes[i];\r\n                        for (; i < rowBytes; ++i) {\r\n                            buffer[j] = (buffer[j - pixBytes] + rawBytes[i]) & 0xFF;\r\n                            j++;\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        for (var i = 0; i < rowBytes; ++i)\r\n                            buffer[j++] = (prevRow[i] + rawBytes[i]) & 0xFF;\r\n                        break;\r\n                    case 3:\r\n                        for (var i = 0; i < pixBytes; ++i)\r\n                            buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\r\n                        for (; i < rowBytes; ++i) {\r\n                            buffer[j] = (((prevRow[i] + buffer[j - pixBytes]) >> 1) +\r\n                                rawBytes[i]) & 0xFF;\r\n                            j++;\r\n                        }\r\n                        break;\r\n                    case 4:\r\n                        // we need to save the up left pixels values. the simplest way\r\n                        // is to create a new buffer\r\n                        for (var i = 0; i < pixBytes; ++i) {\r\n                            var up = prevRow[i];\r\n                            var c = rawBytes[i];\r\n                            buffer[j++] = up + c;\r\n                        }\r\n                        for (; i < rowBytes; ++i) {\r\n                            var up = prevRow[i];\r\n                            var upLeft = prevRow[i - pixBytes];\r\n                            var left = buffer[j - pixBytes];\r\n                            var p = left + up - upLeft;\r\n\r\n                            var pa = p - left;\r\n                            if (pa < 0)\r\n                                pa = -pa;\r\n                            var pb = p - up;\r\n                            if (pb < 0)\r\n                                pb = -pb;\r\n                            var pc = p - upLeft;\r\n                            if (pc < 0)\r\n                                pc = -pc;\r\n\r\n                            var c = rawBytes[i];\r\n                            if (pa <= pb && pa <= pc)\r\n                                buffer[j++] = left + c;\r\n                            else if (pb <= pc)\r\n                                buffer[j++] = up + c;\r\n                            else\r\n                                buffer[j++] = upLeft + c;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        error('Unsupported predictor: ' + predictor);\r\n                }\r\n                this.bufferLength += rowBytes;\r\n        }\r\n    });\r\n\r\n    return streams.PredictorStream = PredictorStream;\r\n});\r\n\n\r\ndefine('skylark-utils-stream/StreamsSequenceStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./DecodeStream\"\r\n], function(skylark, langx, streams, DecodeStream) {\r\n\r\n    var StreamsSequenceStream = DecodeStream.inherit({\r\n        klassName : \"StreamsSequenceStream\",\r\n\r\n        init : function(streams) {\r\n            this.dict = stream.dict;\r\n            this.overrided();          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var streams = this.streams;\r\n            if (streams.length == 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var stream = streams.shift();\r\n            var chunk = stream.getBytes();\r\n            var bufferLength = this.bufferLength;\r\n            var newLength = bufferLength + chunk.length;\r\n            var buffer = this.ensureBuffer(newLength);\r\n            buffer.set(chunk, bufferLength);\r\n            this.bufferLength = newLength;\r\n        }\r\n    });\r\n\r\n    return streams.StreamsSequenceStream = StreamsSequenceStream;\r\n});\r\n\ndefine('skylark-utils-stream/StringStream',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"./streams\",\r\n    \"./Stream\"\r\n], function(skylark, langx, streams, Stream) {\r\n\r\n    var StringStream = Stream.inherit({\r\n        klassName : \"StringStream\",\r\n\r\n        init : function(str) {\r\n            var length = str.length;\r\n            var bytes = new Uint8Array(length);\r\n            for (var n = 0; n < length; ++n)\r\n                bytes[n] = str.charCodeAt(n);\r\n            this.overrided(bytes);          \r\n        }\r\n    });\r\n\r\n\r\n    return stream.StringStream = StringStream;\r\n\r\n});\r\n\ndefine('skylark-utils-stream/main',[\r\n    \"./streams\",\r\n    \"./Ascii85Stream\",\r\n    \"./AsciiHexStream\",\r\n    \"./ChunkedStream\",\r\n    \"./DecodeStream\",\r\n    \"./DecryptStream\",\r\n    \"./FakeStream\",\r\n    \"./FlateStream\",\r\n    \"./LZWStream\",\r\n    \"./PredictorStream\",\r\n    \"./Stream\",\r\n    \"./StreamsSequenceStream\",\r\n    \"./StringStream\"\r\n], function(streams) {\r\n\r\n\treturn streams;\r\n});\ndefine('skylark-utils-stream', ['skylark-utils-stream/main'], function (main) { return main; });\n\n"]}